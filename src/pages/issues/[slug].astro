---
import { CollectionEntry, getCollection } from "astro:content"
import Issues from "@layouts/IssueListLayout.astro"
import Issue from "@layouts/IssueLayout.astro"
import { sortIssues } from "@utils/sortIssues"
import { getPageNumbers } from "@utils/getPageNumbers"
import { SITE } from "@config"

export interface Props {
  issue: CollectionEntry<"issue">
}

export async function getStaticPaths() {
  const issues = await getCollection("issue", ({ data }) => !data.draft)

  const issueResult = issues.map(issue => ({
    params: { slug: issue.slug },
    props: { issue },
  }))

  const pagePaths = getPageNumbers(issues.length, SITE.issuesPerPage).map(
    pageNum => ({
      params: { slug: String(pageNum) },
    })
  )

  return [...issueResult, ...pagePaths]
}

const { slug } = Astro.params
const { issue } = Astro.props

const sortedIssues = sortIssues(await getCollection("issue"))

const totalPages = getPageNumbers(sortedIssues.length, SITE.issuesPerPage)

const currentPage =
  slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug))
    ? Number(slug)
    : 0
const lastIssue = currentPage * SITE.issuesPerPage
const startIssue = lastIssue - SITE.issuesPerPage

const paginatedIssues = sortedIssues.slice(startIssue, lastIssue)
---

{
  issue ? (
    <Issue issue={issue} />
  ) : (
    <Issues
      issues={paginatedIssues}
      pageNum={currentPage}
      totalPages={totalPages.length}
    />
  )
}
