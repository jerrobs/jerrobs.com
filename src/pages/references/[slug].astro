---
import { CollectionEntry, getCollection } from "astro:content";
import References from "@layouts/References.astro";
import ReferenceDetails from "@layouts/ReferenceDetails.astro";
import getSortedReferences from "@utils/getSortedReferences";
import getPageNumbers from "@utils/getPageNumbers";

import { SITE } from "@config";

export interface Props {
  reference: CollectionEntry<"reference">;
}

export async function getStaticPaths() {
  const references = await getCollection(
    "reference",
    ({ data }) => !data.draft
  );

  const referenceResult = references.map(reference => ({
    params: { slug: reference.data.cslItem.id },
    props: { reference },
  }));

  const pagePaths = getPageNumbers(references.length).map(pageNum => ({
    params: { slug: String(pageNum) },
  }));

  return [...referenceResult, ...pagePaths];
}

const { slug } = Astro.params;
const { reference } = Astro.props;

const references = await getCollection("reference");

const sortedReferences = getSortedReferences(references);

const totalPages = getPageNumbers(sortedReferences.length);

const currentPage =
  slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug))
    ? Number(slug)
    : 0;
const lastReference = currentPage * SITE.referencesPerPage;
const startReference = lastReference - SITE.referencesPerPage;

const paginatedReferences = sortedReferences.slice(
  startReference,
  lastReference
);
---

{
  reference ? (
    <ReferenceDetails reference={reference} />
  ) : (
    <References
      references={paginatedReferences}
      pageNum={currentPage}
      totalPages={totalPages.length}
    />
  )
}
