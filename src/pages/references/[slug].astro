---
import { CollectionEntry, getCollection } from "astro:content"
import References from "@layouts/ReferenceListLayout.astro"
import ReferenceDetails from "@layouts/ReferenceLayout.astro"
import { getSortedReferences } from "@utils/getSortedReferences"
import { getPageNumbers } from "@utils/getPageNumbers"

import { SITE } from "@config"

export interface Props {
  reference: CollectionEntry<"reference">
}

export async function getStaticPaths() {
  const references = await getCollection("reference")

  const listPaths = getPageNumbers(
    references.length,
    SITE.referencesPerPage
  ).map(pageNum => ({
    params: { slug: String(pageNum) },
  }))

  return [...listPaths]
}

const { slug } = Astro.params
const { reference } = Astro.props

const references = await getCollection("reference")

const sortedReferences = getSortedReferences(references)

const totalPages = getPageNumbers(
  sortedReferences.length,
  SITE.referencesPerPage
)

const currentPage =
  slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug))
    ? Number(slug)
    : 0
const lastReference = currentPage * SITE.referencesPerPage
const startReference = lastReference - SITE.referencesPerPage

const paginatedReferences = sortedReferences.slice(
  startReference,
  lastReference
)
---

{
  reference ? (
    <ReferenceDetails reference={reference} />
  ) : (
    <References
      references={paginatedReferences}
      pageNum={currentPage}
      totalPages={totalPages.length}
    />
  )
}
