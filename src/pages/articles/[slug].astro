---
import { CollectionEntry, getCollection } from "astro:content";
import Articles from "@layouts/Articles.astro";
import ArticleDetails from "@layouts/ArticleDetails.astro";
import getSortedArticles from "@utils/getSortedArticles";
import getPageNumbers from "@utils/getPageNumbers";
import slugify from "@utils/slugify";
import { SITE } from "@config";

export interface Props {
  article: CollectionEntry<"issue">;
}

export async function getStaticPaths() {
  const articles = await getCollection("article", ({ data }) => !data.draft);

  const articleResult = articles.map(article => ({
    params: { slug: slugify(article.data) },
    props: { article },
  }));

  const pagePaths = getPageNumbers(articles.length).map(pageNum => ({
    params: { slug: String(pageNum) },
  }));

  return [...articleResult, ...pagePaths];
}

const { slug } = Astro.params;
const { article } = Astro.props;

const articles = await getCollection("article");

const sortedArticles = getSortedArticles(articles);

const totalPages = getPageNumbers(sortedArticles.length);

const currentPage =
  slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug))
    ? Number(slug)
    : 0;
const lastArticle = currentPage * SITE.articlePerPage;
const startArticle = lastArticle - SITE.articlePerPage;

const paginatedArticles = sortedArticles.slice(startArticle, lastArticle);
---

{
  article ? (
    <ArticleDetails article={article} />
  ) : (
    <Articles
      articles={paginatedArticles}
      pageNum={currentPage}
      totalPages={totalPages.length}
    />
  )
}
