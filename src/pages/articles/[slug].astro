---
import { CollectionEntry, getCollection } from "astro:content"
import Articles from "@layouts/ArticleListLayout.astro"
import Article from "@layouts/ArticleLayout.astro"
import { getPageNumbers } from "@utils/getPageNumbers"
import { SITE } from "@config"
import { getArticles } from "@utils/getArticles"

export interface Props {
  article: CollectionEntry<"article">
}

const { slug } = Astro.params
const { article } = Astro.props

const articles = await getArticles()

const totalPages = getPageNumbers(articles.length, SITE.articlesPerPage)

export async function getStaticPaths() {
  const articles = await getCollection("article", ({ data }) => !data.draft)

  let viewPaths = articles.map(article => ({
    params: { slug: article.slug },
    props: { article },
  }))

  // let pages = getPageNumbers(articles.length, SITE.articlesPerPage)

  // console.log(pages)

  // const listPaths = pages.map(pageNum => ({
  //   params: { slug: String(pageNum) },
  // }))
  return viewPaths

  // return [...viewPaths, ...listPaths]
}

const currentPage =
  slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug))
    ? Number(slug)
    : 0
const lastArticle = currentPage * SITE.articlesPerPage
const startArticle = lastArticle - SITE.articlesPerPage

const paginatedArticles = articles.slice(startArticle, lastArticle)
---

{
  article ? (
    <Article article={article} />
  ) : (
    <Articles
      articles={paginatedArticles}
      pageNum={currentPage}
      totalPages={totalPages.length}
    />
  )
}
